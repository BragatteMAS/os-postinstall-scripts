{
  "permissions": {
    "allow": [
      "Bash(source:*)",
      "Bash(cp:*)",
      "Bash(halp ls:*)",
      "Bash(halp git)",
      "Bash(ac nav:*)",
      "Bash(rg:*)",
      "Bash(ac cat:*)",
      "Bash(ac rust)",
      "Bash(zsh:*)",
      "Bash(grep:*)",
      "Bash(cmp:*)",
      "Bash(chmod:*)",
      "Bash(ls:*)",
      "Bash(true)",
      "Bash(mkdir:*)",
      "Bash(exec zsh)",
      "Bash(brew:*)",
      "Bash(echo:*)",
      "Bash(conda:*)",
      "Bash(node:*)",
      "Bash(git config:*)",
      "Bash(# Criar uma cópia temporária do .zshrc atual\ncp ~/.zshrc /tmp/zshrc_temp\n\n# Adicionar cabeçalho da nova seção\necho \"\"\"\" >> /tmp/zshrc_temp\necho \"\"# ╔═══════════════════════════════════════════════════════════════════════════╗\"\" >> /tmp/zshrc_temp\necho \"\"# ║ SECTION 23: RUST TOOLS AUTO-DETECTION AND INTEGRATION                     ║\"\" >> /tmp/zshrc_temp\necho \"\"# ╚═══════════════════════════════════════════════════════════════════════════╝\"\" >> /tmp/zshrc_temp\n\n# Adicionar o conteúdo do arquivo de integração (excluindo o cabeçalho)\ntail -n +5 /Users/bragatte/Documents/GitHub/Linux_posintall_script/zshrc_rust_integration.zsh >> /tmp/zshrc_temp\n\n# Adicionar linha em branco antes das configurações do bun\necho \"\"\"\" >> /tmp/zshrc_temp\n\n# Mostrar as últimas linhas para verificar\ntail -20 /tmp/zshrc_temp | head -10)",
      "Bash(# Aplicar o novo .zshrc ao sistema\ncp /tmp/zshrc_temp ~/.zshrc\n\n# Verificar que foi aplicado\necho \"\"✅ .zshrc do sistema atualizado\"\"\n\n# Contar linhas do novo arquivo\nwc -l ~/.zshrc)",
      "Bash(diff:*)",
      "Bash(# Verificar checksums para confirmar\nsha256sum ~/.zshrc /Users/bragatte/Documents/GitHub/Linux_posintall_script/zshrc)",
      "Bash(delta:*)",
      "Bash(# Criar dois arquivos de teste para ver delta em ação\necho \"\"linha 1\"\" > /tmp/test1.txt\necho \"\"linha 2\"\" >> /tmp/test1.txt\necho \"\"linha 3\"\" >> /tmp/test1.txt\n\necho \"\"linha 1\"\" > /tmp/test2.txt\necho \"\"linha modificada\"\" >> /tmp/test2.txt\necho \"\"linha 3\"\" >> /tmp/test2.txt\n\n# Comparar com delta\ndelta /tmp/test1.txt /tmp/test2.txt)",
      "Bash(# Verificar ferramentas Rust instaladas\nfor tool in bat eza fd rg delta dust bottom zoxide gitui tokei; do\n    if command -v $tool &> /dev/null; then\n        echo \"\"✅ $tool está instalado\"\"\n    else\n        echo \"\"❌ $tool não está instalado\"\"\n    fi\ndone)",
      "Bash(# Verificar que a correção está aplicada\nrg \"\"bragatte\"\" ~/.zshrc | rg -v \"\"Copyright\"\" | rg -v \"\"marcelobragatte\"\")",
      "Bash(# Verificar referências nos novos scripts\nrg \"\"SEU_USUARIO\"\" /Users/bragatte/Documents/GitHub/Linux_posintall_script/*.sh /Users/bragatte/Documents/GitHub/Linux_posintall_script/*.zsh /Users/bragatte/Documents/GitHub/Linux_posintall_script/*.md 2>/dev/null | wc -l)",
      "Bash(# Listar onde estão os placeholders\nrg -n \"\"SEU_USUARIO\"\" /Users/bragatte/Documents/GitHub/Linux_posintall_script/*.sh /Users/bragatte/Documents/GitHub/Linux_posintall_script/*.zsh /Users/bragatte/Documents/GitHub/Linux_posintall_script/*.md 2>/dev/null)",
      "Bash(# Testar sintaxe do zshrc\nzsh -n ~/.zshrc)",
      "Bash(# Testar se as variáveis principais estão definidas corretamente\nzsh -c ''source ~/.zshrc 2>&1 | grep -E \"\"(error|Error|ERROR|warning|Warning|WARNING)\"\" | grep -v \"\"CONDA_REPORT_ERRORS\"\" | grep -v \"\"warn_unused_configs\"\" | grep -v \"\"warn_return_any\"\"'')",
      "Bash(# Verificar se as funções críticas estão definidas\nzsh -c ''\nsource ~/.zshrc\necho \"\"Testando funções críticas:\"\"\necho -n \"\"✓ check_dependencies: \"\"; type check_dependencies >/dev/null 2>&1 && echo \"\"OK\"\" || echo \"\"ERRO\"\"\necho -n \"\"✓ hal: \"\"; type hal >/dev/null 2>&1 && echo \"\"OK\"\" || echo \"\"ERRO\"\"\necho -n \"\"✓ install_tool: \"\"; type install_tool >/dev/null 2>&1 && echo \"\"OK\"\" || echo \"\"ERRO\"\"\necho -n \"\"✓ check_rust_tools: \"\"; type check_rust_tools >/dev/null 2>&1 && echo \"\"OK\"\" || echo \"\"ERRO\"\"\necho -n \"\"✓ universal_install: \"\"; type universal_install >/dev/null 2>&1 && echo \"\"OK\"\" || echo \"\"ERRO\"\"\necho -n \"\"✓ new_machine_setup: \"\"; type new_machine_setup >/dev/null 2>&1 && echo \"\"OK\"\" || echo \"\"ERRO\"\"\n'')",
      "Bash(# Verificar se os aliases principais estão funcionando\nzsh -c ''\nsource ~/.zshrc\necho \"\"Testando aliases críticos:\"\"\necho -n \"\"✓ ls: \"\"; alias ls >/dev/null 2>&1 && echo \"\"OK\"\" || echo \"\"ERRO\"\"\necho -n \"\"✓ ll: \"\"; alias ll >/dev/null 2>&1 && echo \"\"OK\"\" || echo \"\"ERRO\"\"\necho -n \"\"✓ install: \"\"; alias install >/dev/null 2>&1 && echo \"\"OK\"\" || echo \"\"ERRO\"\"\necho -n \"\"✓ newsetup: \"\"; alias newsetup >/dev/null 2>&1 && echo \"\"OK\"\" || echo \"\"ERRO\"\"\necho -n \"\"✓ rustsetup: \"\"; alias rustsetup >/dev/null 2>&1 && echo \"\"OK\"\" || echo \"\"ERRO\"\"\necho -n \"\"✓ irust: \"\"; alias irust >/dev/null 2>&1 && echo \"\"OK\"\" || echo \"\"ERRO\"\"\n'')",
      "Bash(# Verificar se as variáveis de ambiente importantes estão definidas\nzsh -c ''\nsource ~/.zshrc\necho \"\"Verificando variáveis de ambiente:\"\"\necho -n \"\"✓ HOME: \"\"; [[ -n \"\"$HOME\"\" ]] && echo \"\"OK ($HOME)\"\" || echo \"\"ERRO\"\"\necho -n \"\"✓ PATH contém .cargo/bin: \"\"; echo \"\"$PATH\"\" | grep -q \"\".cargo/bin\"\" && echo \"\"OK\"\" || echo \"\"ERRO\"\"\necho -n \"\"✓ IS_MACOS: \"\"; [[ -n \"\"$IS_MACOS\"\" ]] && echo \"\"OK ($IS_MACOS)\"\" || echo \"\"ERRO\"\"\necho -n \"\"✓ RUST_TOOLS_CHECKED: \"\"; [[ -n \"\"$RUST_TOOLS_CHECKED\"\" ]] && echo \"\"OK\"\" || echo \"\"ERRO\"\"\n'')",
      "Bash(# Teste final: verificar se o zshrc carrega sem erros em modo não-interativo\nzsh -c ''source ~/.zshrc 2>&1'' | grep -v \"\"^┏\"\" | grep -v \"\"^┃\"\" | grep -v \"\"^┗\"\" | grep -v \"\"^├─\"\" | grep -v \"\"^└─\"\" | grep -v \"\"^🎯\"\" | grep -v \"\"^🦀\"\" | grep -v \"\"^💡\"\" | grep -v \"\"^━\"\" | grep -v \"\"Created.*env.local.template\"\" | grep -v \"\"^$\"\")",
      "Bash(mv:*)",
      "Bash(./update_repository_name.sh:*)",
      "Bash(git remote get-url:*)",
      "Bash(git remote set-url:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(gh issue list:*)",
      "Bash(gh pr list:*)",
      "Bash(./close_old_items.sh:*)",
      "Bash(gh issue create:*)",
      "Bash(rm:*)",
      "Bash(git checkout:*)",
      "Bash(git merge:*)",
      "Bash(git branch:*)",
      "Bash(gh repo edit:*)",
      "Bash(gh api:*)",
      "Bash(git reset:*)",
      "Bash(find:*)",
      "Bash(git tag:*)",
      "Bash(./tests/test_harness.sh:*)",
      "Bash(bash:*)",
      "Bash(./scripts/fix-security.sh:*)",
      "Bash(./scripts/reorganize-structure.sh:*)",
      "Bash(git fetch:*)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "Bash(/usr/bin/find . -name \"README.md\" -type f)",
      "Bash(c)",
      "Bash(clear)",
      "Bash(show_welcome)",
      "Bash(welcome)",
      "mcp__sequential-thinking__sequentialthinking",
      "Bash(./tests/security/test_apt_lock_safety.sh:*)",
      "Bash(./tests/security/test_apt_safety_simple.sh:*)",
      "Bash(git log --oneline --grep=\"feat(security): complete APT lock\" -1)"
    ],
    "deny": []
  }
}