# OS Post-Install Scripts - Central Configuration
# This is the default configuration file. Copy to settings.yaml and customize.
# Version: 1.0.0

# User Configuration
user:
  name: "${USER}"  # Will be replaced with actual username
  email: "user@example.com"

# Path Configuration
paths:
  # Base directories
  repo_cache: "${HOME}/.config/os-postinstall"

  # Tool-specific paths
  serena_uv: "${HOME}/.local/bin/uv"
  bmad_core: ".bmad-core"
  claude_config:
    macos: "${HOME}/Library/Application Support/Claude/claude.json"
    linux: "${HOME}/.config/Claude/claude.json"
    windows: "${APPDATA:-${HOME}/AppData/Roaming}/Claude/claude.json"

# Feature Configuration
features:
  # Model Context Protocol tools
  mcps:
    context7:
      enabled: true
      description: "Always up-to-date documentation"
    fetch:
      enabled: true
      description: "Intelligent web requests"
    sequential_thinking:
      enabled: true
      description: "Structured reasoning"
    serena:
      enabled: true
      description: "Semantic code search"
      custom_path: true
      path: "${HOME}/.local/bin/uv"
      repo: "${HOME}/Documents/GitHub/serena"
    fastapi:
      enabled: true
      description: "FastAPI documentation and examples"
    a2a:
      enabled: true
      description: "Google A2A (AI to AI) tools"
    system_prompts:
      enabled: true
      description: "System prompts and AI models library"

  # BMAD Method configuration
  bmad:
    enabled: true
    version: "latest"
    ides:
      - "claude-code"
      - "cursor"
    auto_install: true
    interactive: false  # Set to true for interactive installation

  # Shell configuration
  shell:
    profile: "standard"  # Options: minimal, standard, full
    zsh:
      oh_my_zsh: true
      theme: "robbyrussell"
      plugins:
        - git
        - docker
        - kubectl
        - zoxide

    # Feature modules to load
    modules:
      base: true           # Core aliases and functions
      rust_tools: true     # Rust-based CLI tools
      conda: true          # Conda/Mamba integration
      git_advanced: true   # Advanced git aliases
      ai_tools: true       # AI development tools
      docker: true         # Docker/Podman aliases

  # Development tools
  tools:
    rust:
      install: true
      tools:
        - bat         # Better cat
        - eza         # Better ls
        - fd-find     # Better find
        - ripgrep     # Better grep
        - delta       # Better diff
        - dust        # Disk usage
        - bottom      # System monitor
        - zoxide      # Smart cd
        - tokei       # Code statistics
        - sd          # Better sed
        - hyperfine   # Benchmarking
        - gitui       # Terminal git UI

    python:
      install: true
      manager: "uv"  # Options: uv, conda, pyenv
      default_env: "default"
      packages:
        - ipython
        - jupyter
        - pandas
        - numpy
        - matplotlib

    node:
      install: true
      version: "lts"
      global_packages:
        - pnpm
        - yarn
        - typescript
        - ts-node

# Installation profiles
profiles:
  minimal:
    description: "Essential tools only"
    features:
      shell:
        profile: "minimal"
        modules:
          base: true
          rust_tools: true
      tools:
        rust:
          tools:
            - bat
            - eza
            - fd-find
            - ripgrep
            - zoxide

  standard:
    description: "Balanced setup for most developers"
    inherits: "default"  # Uses settings above

  full:
    description: "Everything including experimental features"
    features:
      shell:
        profile: "full"
        modules:
          experimental: true
      tools:
        all: true

# Platform-specific overrides
platforms:
  macos:
    package_manager: "brew"
    additional_tools:
      - rectangle  # Window manager
      - stats      # System monitor

  linux:
    package_manager: "auto"  # Detects apt, dnf, pacman, etc.
    additional_tools:
      - build-essential
      - curl
      - wget

  windows:
    package_manager: "winget"
    shell: "git-bash"  # or "powershell"

# Behavior configuration
behavior:
  # Installation behavior
  installation:
    mode: "interactive"  # Options: interactive, unattended, wizard
    skip_confirmations: false
    backup_existing: true
    verbose: true

  # Update behavior
  updates:
    check_on_start: true
    auto_update_tools: false

  # Error handling
  errors:
    stop_on_error: true
    detailed_logging: true