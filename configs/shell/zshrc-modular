#!/bin/zsh
# ==============================================================================
# .zshrc - Modular configuration system
# Compatible with macOS and Linux
# Author: Bragatte, M.A.S
# ==============================================================================

# ╔═══════════════════════════════════════════════════════════════════════════╗
# ║ MODULAR ZSH CONFIGURATION LOADER                                           ║
# ╚═══════════════════════════════════════════════════════════════════════════╝

## Get the directory of this script
ZSHRC_DIR="${HOME}/.config/os-postinstall"
if [[ ! -d "$ZSHRC_DIR" ]]; then
    # Fallback to the repository location
    ZSHRC_DIR="$(cd "$(dirname "${(%):-%N}")" && pwd)"
fi

## Configuration file path
CONFIG_FILE="${CONFIG_FILE:-$ZSHRC_DIR/configs/settings/settings.yaml}"

## Load configuration system if available
if [[ -f "$ZSHRC_DIR/scripts/utils/config-loader.sh" ]]; then
    source "$ZSHRC_DIR/scripts/utils/config-loader.sh"
    
    # Load configuration
    if [[ -f "$CONFIG_FILE" ]]; then
        load_config "$CONFIG_FILE" 2>/dev/null || true
    fi
    
    # Function to check if a module should be loaded
    should_load_module() {
        local module="$1"
        local enabled=$(get_config "features.shell.modules.$module" "true")
        [[ "$enabled" == "true" ]] || [[ "$enabled" == "yes" ]] || [[ "$enabled" == "1" ]]
    }
else
    # Fallback: load all modules if config system not available
    should_load_module() {
        return 0  # Always true
    }
fi

## Module directory
MODULE_DIR="$ZSHRC_DIR/configs/shell/modules"

## Load modules based on configuration
load_module() {
    local module_file="$1"
    local module_name="$2"
    
    if [[ -f "$MODULE_DIR/$module_file" ]] && should_load_module "$module_name"; then
        source "$MODULE_DIR/$module_file"
    fi
}

# ╔═══════════════════════════════════════════════════════════════════════════╗
# ║ CORE MODULES (Always loaded)                                               ║
# ╚═══════════════════════════════════════════════════════════════════════════╝

## Essential modules that are always loaded
source "$MODULE_DIR/00-os-detection.zsh" 2>/dev/null || true
source "$MODULE_DIR/01-dependency-check.zsh" 2>/dev/null || true
source "$MODULE_DIR/02-base-config.zsh" 2>/dev/null || true
source "$MODULE_DIR/03-environment.zsh" 2>/dev/null || true

# ╔═══════════════════════════════════════════════════════════════════════════╗
# ║ OPTIONAL MODULES (Based on configuration)                                 ║
# ╚═══════════════════════════════════════════════════════════════════════════╝

## Basic features
load_module "10-aliases-basic.zsh" "base"
load_module "11-aliases-git.zsh" "git_advanced"

## Tool integrations
load_module "20-rust-tools.zsh" "rust_tools"
load_module "30-oh-my-zsh.zsh" "oh_my_zsh"
load_module "31-powerlevel10k.zsh" "powerlevel10k"
load_module "32-fzf.zsh" "fzf"

## Development environments
load_module "40-docker.zsh" "docker"
load_module "41-kubernetes.zsh" "kubernetes"
load_module "42-python.zsh" "python"
load_module "43-node.zsh" "node"
load_module "44-rust.zsh" "rust"
load_module "45-go.zsh" "go"

## AI and data science tools
load_module "50-conda.zsh" "conda"
load_module "51-mamba.zsh" "mamba"
load_module "52-julia.zsh" "julia"
load_module "53-ai-tools.zsh" "ai_tools"

## Advanced features
load_module "60-functions.zsh" "advanced_functions"
load_module "61-research.zsh" "research_tools"
load_module "62-productivity.zsh" "productivity"

## Platform specific
if [[ "$IS_MACOS" == true ]]; then
    load_module "70-macos.zsh" "macos"
fi

if [[ "$IS_LINUX" == true ]]; then
    load_module "71-linux.zsh" "linux"
fi

## Local customizations (not tracked in git)
if [[ -f "$HOME/.zshrc.local" ]]; then
    source "$HOME/.zshrc.local"
fi

# ╔═══════════════════════════════════════════════════════════════════════════╗
# ║ PROFILE-BASED LOADING                                                      ║
# ╚═══════════════════════════════════════════════════════════════════════════╝

## Get shell profile setting
SHELL_PROFILE=$(get_config "features.shell.profile" "standard")

case "$SHELL_PROFILE" in
    minimal)
        # Minimal profile loads only essential modules
        # Core modules are already loaded above
        ;;
    standard)
        # Standard profile loads most modules (default behavior)
        # Modules are loaded based on individual settings above
        ;;
    full)
        # Full profile forces all modules to load
        for module in "$MODULE_DIR"/*.zsh; do
            [[ -f "$module" ]] && source "$module"
        done
        ;;
esac

# ╔═══════════════════════════════════════════════════════════════════════════╗
# ║ FINAL SETUP                                                                ║
# ╚═══════════════════════════════════════════════════════════════════════════╝

## Print welcome message
if [[ -z "$ZSHRC_LOADED" ]]; then
    export ZSHRC_LOADED=1
    echo "🚀 Zsh configuration loaded (profile: $SHELL_PROFILE)"
    echo "💡 Type 'zsh-help' for available commands and aliases"
fi