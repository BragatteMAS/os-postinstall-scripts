#!/usr/bin/env bash
# Pre-commit hook to enforce coding standards

set -euo pipefail

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check for pandas usage (forbidden - use Polars instead)
check_no_pandas() {
    local files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(py|ipynb)$' || true)
    
    if [[ -z "$files" ]]; then
        return 0
    fi
    
    echo "Checking for pandas usage..."
    
    for file in $files; do
        if git diff --cached --name-only "$file" | xargs grep -l "import pandas\|from pandas\|pd\." 2>/dev/null; then
            echo -e "${RED}❌ ERROR: pandas usage detected in $file${NC}"
            echo -e "${YELLOW}This project uses Polars for data processing (5-10x faster).${NC}"
            echo -e "${YELLOW}Replace:${NC}"
            echo "  import pandas as pd  →  import polars as pl"
            echo "  pd.read_csv()       →  pl.read_csv()"
            echo "  pd.DataFrame()      →  pl.DataFrame()"
            echo -e "${YELLOW}See ADR-012 for migration guide.${NC}"
            return 1
        fi
    done
    
    echo -e "${GREEN}✓ No pandas usage detected${NC}"
    return 0
}

# Check for proper Rust/Polars imports
check_polars_imports() {
    local files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(py)$' || true)
    
    if [[ -z "$files" ]]; then
        return 0
    fi
    
    echo "Checking Polars import style..."
    
    for file in $files; do
        # Check if file contains data processing
        if git diff --cached "$file" | grep -q "DataFrame\|read_csv\|read_json"; then
            # Ensure it imports Polars, not pandas
            if ! git diff --cached "$file" | grep -q "import polars"; then
                echo -e "${YELLOW}⚠️  Warning: $file appears to do data processing but doesn't import Polars${NC}"
                echo -e "${YELLOW}Consider adding: import polars as pl${NC}"
            fi
        fi
    done
    
    return 0
}

# Main execution
main() {
    echo "Running pre-commit checks..."
    
    # Run all checks
    local failed=0
    
    check_no_pandas || failed=1
    check_polars_imports || failed=1
    
    if [[ $failed -eq 1 ]]; then
        echo -e "${RED}Pre-commit checks failed!${NC}"
        echo "Fix the issues above and try again."
        exit 1
    fi
    
    echo -e "${GREEN}All pre-commit checks passed!${NC}"
    exit 0
}

main